/* BRUTE APPROACH
class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
        int rows=mat.size();
        int col=mat[0].size();
       if(rows*col!=r*c) return mat;
        vector<int>temp;
        vector<vector<int>>ans(r,vector(c,0));
        for(int i=0;i<rows;i++){
            for(int j=0;j<col;j++){
                temp.push_back(mat[i][j]);
            }
        }
        int te=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                ans[i][j]=temp[te++];
            }
        }
        return ans;
    }
};
*/
// OPTIMAL APPROACH
class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        int m = nums.size(), n = nums[0].size();
        if (m * n != r * c) {
            return nums;
        }

        vector<vector<int>> res(r, vector<int>(c, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int k = i * n + j;
                res[k / c][k % c] = nums[i][j];
            }
        }

        return res;
    }
};
