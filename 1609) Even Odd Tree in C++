/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
//OPTIMAL APPROACH
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        if (!root)
            return true;

        queue<TreeNode*> qt;
        qt.push(root);
        int level = 0; // variable to track the level

        while (!qt.empty()) {
            int n = qt.size();
            int prevVal = (level % 2 == 0) ? INT_MIN : INT_MAX;

            for (int i = 0; i < n; i++) {
                TreeNode* latest = qt.front();
                qt.pop();

                if ((level % 2 == 0 && (latest->val % 2 == 0 || latest->val <= prevVal)) ||
                    (level % 2 == 1 && (latest->val % 2 == 1 || latest->val >= prevVal))) {
                    return false;
                }

                prevVal = latest->val;

                if (latest->left) {
                    qt.push(latest->left);
                }
                if (latest->right) {
                    qt.push(latest->right);
                }
            }

            level++;
        }

        return true;
    }
};
/*
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */ Brute force which may result time limit exceed
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        if (!root)
            return true;
        vector<vector<int>> ans;
        queue<TreeNode*> qt;
        qt.push(root);
        while (!qt.empty()) {
            int n = qt.size();
            vector<int> temp;
            for (int i = 0; i < n; i++) {
                TreeNode* latest = qt.front();
                qt.pop();
                if (latest->left) {
                    qt.push(latest->left);
                }
                if (latest->right) {
                    qt.push(latest->right);
                }
                temp.push_back(latest->val);
            }
            ans.push_back(temp);
        }

        int flag = 0;
        for (int i = 0; i < ans.size(); i++) {
            if(flag==0 && ans[i].size()==1 && ans[i][0]%2==0)return false;
            else if(flag==1 && ans[i].size()==1 && ans[i][0]%2==1)return false;
            for (int j = 1; j < ans[i].size(); j++) {
                if ((flag == 0 && ans[i][j] <= ans[i][j - 1]) || (flag == 0 && ans[i][j]%2==0 )) {
                    return false;
                } else if ((flag == 1 && ans[i][j] >= ans[i][j - 1]) || (flag == 1 && ans[i][j]%2==1)) {
                    return false;
                }
            }
            flag = !flag;
        }
        return true;
    }
};
*/
