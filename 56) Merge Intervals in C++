//  BRUTE FORCE APPROACH
// TC = O(NlogN) + O(2N)
// SC =O(N);
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        int n=intervals.size();
        sort(intervals.begin(),intervals.end()); 
        int start,end;
        for(int i=0;i<n;i++){
            start=intervals[i][0];
            end=intervals[i][1];
            if(!ans.empty() && end<=ans.back()[1])continue;

            for(int j=i+1;j<n;j++){
                if(intervals[j][0]<=end){
                    end=max(end,intervals[j][1]);
                }
                else{
                    break;
                }
            }
            ans.push_back ({start,end});
        }
        return ans;
    }
};

// OPTIMAL APPROACH
// TC = O(NlogN) + O(N)
// SC =O(N);
/*
#include<bits/stdc++.h>
vector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> &arr){
	vector<vector<int>> ans;
	sort(arr.begin(),arr.end());
	for(int i=0;i<arr.size();i++){
		if(ans.empty() || ans.back()[1]<arr[i][0]){
			ans.push_back(arr[i]);
		}
		else{
			ans.back()[1]=max(ans.back()[1],arr[i][1]);
		}
	}
	return ans;
	
}
*/
