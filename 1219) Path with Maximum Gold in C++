class Solution {
public:
int dfs(int i, int j, vector<vector<int>>& grid) {
    int drow[] = {-1, 1, 0, 0};
    int dcol[] = {0, 0, -1, 1};
    int m = grid.size();
    int n = grid[0].size();
    int currval = grid[i][j], ans = 0;
    if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) return 0;
    for (int k = 0; k < 4; k++) {
        int row = i + drow[k];
        int col = j + dcol[k];
        if (row >= 0 && row < m && col >= 0 && col < n) {
            grid[i][j] = 0;
            ans = max(ans, currval + dfs(row, col, grid));
            grid[i][j] = currval;
        }
    }
    return ans;
}

    int getMaximumGold(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0)
                    ans = max(ans, dfs(i, j, grid));
            }
        }
        return ans;
    }
};
