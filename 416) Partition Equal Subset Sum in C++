class Solution {
public:
    int fun(vector<vector<int>>&memo,vector<int>& nums,int n,int total){
        if(total==0)return 1;
        if(n==-1 || total<0)return 0;
        if(memo[n][total]!=-1)return memo[n][total];
        return memo[n][total]=(fun(memo,nums,n-1,total-nums[n])||fun(memo,nums,n-1,total));
    }
    bool canPartition(vector<int>& nums) {
        int total=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            total+=nums[i];
        }
        if(total%2)return false;
        total/=2;

        //     memoization
        //vector<vector<int>>memo(n,vector<int>(total+1,-1));
        //return fun(memo,nums,n-1,total);

        //     Tabulation
        /*
        vector<vector<bool>>dp(n,vector<bool>(total+1,false));
        for(int i=0;i<n;i++){
            dp[i][0]=true;
        }
        if(nums[0]<=total)
        dp[0][nums[0]]=true;
        for(int i=1;i<n;i++){
            for(int j=1;j<=total;j++){
                bool not_take=dp[i-1][j];
                bool take=false;
                if(nums[i]<=j){
                    take=dp[i-1][j-nums[i]];
                }
                dp[i][j]=(take||not_take);
            }
        }
        return dp[n-1][total]; */

        // tabulation with space optimization
        vector<bool>prev(total+1,false);
        prev[0]=true;
        if(nums[0]<=total)
        prev[nums[0]]=true;
        for(int i=1;i<n;i++){
            vector<bool>curr(total+1,false);
            curr[0]=true;
            for(int j=1;j<=total;j++){
                bool not_take=prev[j];
                bool take=false;
                if(nums[i]<=j){
                    take=prev[j-nums[i]];
                }
                curr[j]=(take||not_take);
            }
            prev=curr;
        }
        return prev[total];
    }
};
