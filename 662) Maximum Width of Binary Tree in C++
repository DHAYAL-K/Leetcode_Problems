/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)return 0;

        int ans=0;
        queue<pair<TreeNode*,int>>qt;
        qt.push({root,0});
        while(!qt.empty()){
            int n=qt.size();
            int first,last;
            int mini=qt.front().second;

            for(int i=0;i<n;i++){
                TreeNode* temp=qt.front().first;
                int data=qt.front().second;
                qt.pop();
                long long int val=data-mini;
                if(i==0){
                    first=val;
                }
                if(i==n-1){
                    last=val;
                }
                if(temp->left){
                    qt.push({temp->left,2*val+1});
                }
                if(temp->right){
                    qt.push({temp->right,2*val+2});
                }
                ans=max(ans,last-first+1);
            }
        }
        return ans;
    }
};
