//Better solution
#include <bits/stdc++.h>
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        long long sum=0;
        long long fourth;
        set<vector<int>>st;
        int n=nums.size();

        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                set<long long>hashset;
                for(int k=j+1;k<n;k++){
                    sum=nums[i]+nums[j];
                    sum+=nums[k];
                    fourth=target-sum;
                    if(hashset.find(fourth)!=hashset.end()){
                        vector<int> temp={nums[i],nums[j],nums[k],(int)fourth};
                        sort(temp.begin(),temp.end());
                        st.insert(temp);
                    }
                    hashset.insert(nums[k]);
                }
            }
        }
        vector<vector<int>> ans(st.begin(),st.end());
        return ans;
    }
};
/*  Optimal solution
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            if(i!=0 and nums[i]==nums[i-1])continue;
            for(int j=i+1;j<n;j++){
            if(j!=i+1 and nums[j]==nums[j-1])continue;
                int k=j+1;
                int end=n-1;
                while(k<end){
                long long sum=nums[i]+nums[j];
                sum+=nums[k]+nums[end];
                    if(target<sum){
                        end--;
                    }
                    else if(target>sum){
                        k++;
                    }
                    else{
                        vector<int>temp={nums[i],nums[j],nums[k],(int)nums[end]};
                        ans.push_back(temp);
                        k++;
                        end--;
                        while(k<end && nums[k]==nums[k-1])k++;
                        while(k<end && nums[end]==nums[end+1])end--;
                    }
                }
            }
        }
        return ans;
        
    }
};
*/
