class Solution {
public:
    void dfs(int i,vector<int>adj[],vector<int>&visited){
        visited[i]=1;
        for(auto it:adj[i]){
            if (visited[it] != 1) {
                dfs(it, adj, visited);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
       int V=isConnected.size();
       vector<int> adj[V+1];
       for(int i=0;i<V;i++){
           for(int j=0;j<V;j++){
               if(i!=j && isConnected[i][j]==1){
                    adj[i+1].push_back(j+1);
                    adj[i+1].push_back(j+1);
               }
           }
       } 
       vector<int> visited(V+1,0);
       int cnt=0;
       for(int i=1;i<V+1;i++){
           if(visited[i]==0){
               cnt++;
               dfs(i,adj,visited);
           }
       }
       return cnt;
    }
};
